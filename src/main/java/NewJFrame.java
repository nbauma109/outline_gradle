import java.io.File;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.TreeModel;

import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.Outline;
import org.netbeans.swing.outline.OutlineModel;

public class NewJFrame extends JFrame {
	public NewJFrame() {
		// Initialize the ui generated by the Matisse GUI Builder, which,
		// for example, adds the JScrollPane to the JFrame ContentPane:
//	    initComponents();
		// Here I am assuming we are not on Windows,
		// otherwise use Utilities.isWindows() ? 1 : 0
		// from the NetBeans Utilities API:
		TreeModel treeMdl = new FileTreeModel(File.listRoots()[0]);
		// Create the Outline's model, consisting of the TreeModel and the RowModel,
		// together with two optional values: a boolen for something or other,
		// and the display name for the first column:
		OutlineModel mdl = DefaultOutlineModel.createOutlineModel(treeMdl, new FileRowModel(), true, "File System");
		// Initialize the Outline object:
		Outline outline1 = new Outline();
		// By default, the root is shown, while here that isn't necessary:
		outline1.setRootVisible(false);
		// Assign the model to the Outline object:
		outline1.setModel(mdl);
		JScrollPane jScrollPane1 = new JScrollPane(outline1);
		// Add the Outline object to the JScrollPane:
		jScrollPane1.setViewportView(outline1);

		getContentPane().add(jScrollPane1);
		pack();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				new NewJFrame();
			}
		});

	}
}
